.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_plot_preprocessing.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_preprocessing.py:


.. _preproc_meeg:

===================
Preprocess MEG data
===================
The preprocessing pipeline runs the ICA algorithm for an
automatic removal of eyes and heart related artefacts.
A report is automatically generated and can be used to correct
and/or fine-tune the correction in each subject.

The **input** data can be in **ds** or **fif** format.


.. code-block:: default


    # Authors: Annalisa Pascarella <a.pascarella@iac.cnr.it>
    #          Mainak Jas <mainakjas@gmail.com>
    # License: BSD (3-clause)

    # sphinx_gallery_thumbnail_number = 2

    import os.path as op

    import nipype.pipeline.engine as pe

    import ephypype
    from ephypype.nodes import create_iterator, create_datagrabber
    from ephypype.datasets import fetch_omega_dataset








Let us fetch the data first. It is around 675 MB download.


.. code-block:: default


    data_type = 'fif'
    base_path = op.join(op.dirname(ephypype.__file__), '..', 'examples')
    data_path = fetch_omega_dataset(base_path)







then read the parameters for preprocessing from a
:download:`json <https://github.com/neuropycon/ephypype/blob/master/examples/params_preprocessing.json>`
file and print it


.. code-block:: default


    import json  # noqa
    import pprint  # noqa
    data = json.load(open("params_preprocessing.json"))
    pprint.pprint({'preprocessing parameters': data})

    down_sfreq = data['down_sfreq']
    l_freq = data['l_freq']
    h_freq = data['h_freq']
    ECG_ch_name = data['ECG_ch_name']
    EoG_ch_name = data['EoG_ch_name']
    variance = data['variance']
    reject = data['reject']





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    {'preprocessing parameters': {'ECG_ch_name': 'ECG',
                                  'EoG_ch_name': 'HEOG, VEOG',
                                  'down_sfreq': 800,
                                  'h_freq': 150,
                                  'l_freq': 0.1,
                                  'reject': {'grad': 5e-10, 'mag': 5e-12},
                                  'variance': 0.95}}



Then, we create our workflow and specify the `base_dir` which tells
nipype the directory in which to store the outputs.


.. code-block:: default


    # workflow directory within the `base_dir`
    preproc_pipeline_name = 'preprocessing_workflow'

    main_workflow = pe.Workflow(name=preproc_pipeline_name)
    main_workflow.base_dir = data_path







Then we create a node to pass input filenames to DataGrabber from nipype


.. code-block:: default


    subject_ids = ['sub-0003']  # 'sub-0004', 'sub-0006'
    session_ids = ['ses-0001']
    infosource = create_iterator(['subject_id', 'session_id'],
                                 [subject_ids, session_ids])







and a node to grab data. The template_args in this node iterate upon
the values in the infosource node


.. code-block:: default


    template_path = '*%s/%s/meg/%s*rest*raw.fif'
    template_args = [['subject_id', 'session_id', 'subject_id']]
    datasource = create_datagrabber(data_path, template_path, template_args)







Ephypype creates for us a pipeline which can be connected to these
nodes we created. The preprocessing pipeline is implemented by the function
:func:`ephypype.pipelines.preproc_meeg.create_pipeline_preproc_meeg`, thus to
instantiate this pipeline node, we import it and pass our
parameters to it.
The preprocessing pipeline contains two nodes that are based on the MNE
Python functions performing the decomposition of the MEG/EEG signal using an
|ICA| algorithm.

.. |ICA| raw:: html

   <a href="http://martinos.org/mne/stable/auto_tutorials/plot_artifacts_correction_ica.html" target="_blank">ICA</a>

In particular, the two nodes are:

* :class:`ephypype.interfaces.mne.preproc.PreprocFif` performs filtering on the raw data
* :class:`ephypype.interfaces.mne.preproc.CompIca` computes ICA solution on raw fif data


.. code-block:: default


    from ephypype.pipelines.preproc_meeg import create_pipeline_preproc_meeg  # noqa
    preproc_workflow = create_pipeline_preproc_meeg(
        data_path, l_freq=l_freq, h_freq=h_freq, down_sfreq=down_sfreq,
        variance=variance, ECG_ch_name=ECG_ch_name, EoG_ch_name=EoG_ch_name,
        data_type=data_type)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    *** main_path -> /home/circleci/project/examples/sample_BIDS_omega ***



We then connect the nodes two at a time. First, we connect the two outputs
(subject_id and session_id) of the infosource node to the datasource node.
So, these two nodes taken together can grab data.


.. code-block:: default


    main_workflow.connect(infosource, 'subject_id', datasource, 'subject_id')
    main_workflow.connect(infosource, 'session_id', datasource, 'session_id')







Similarly, for the inputnode of the preproc_workflow. Things will become
clearer in a moment when we plot the graph of the workflow.


.. code-block:: default


    main_workflow.connect(infosource, 'subject_id',
                          preproc_workflow, 'inputnode.subject_id')
    main_workflow.connect(datasource, 'raw_file',
                          preproc_workflow, 'inputnode.raw_file')







To do so, we first write the workflow graph (optional)


.. code-block:: default


    main_workflow.write_graph(graph2use='colored')  # colored







and visualize it. Take a moment to pause and notice how the connections
here correspond to how we connected the nodes.


.. code-block:: default


    import matplotlib.pyplot as plt  # noqa
    img = plt.imread(op.join(data_path, preproc_pipeline_name, 'graph.png'))
    plt.figure(figsize=(6, 6))
    plt.imshow(img)
    plt.axis('off')




.. image:: /auto_examples/images/sphx_glr_plot_preprocessing_001.png
    :class: sphx-glr-single-img




Finally, we are now ready to execute our workflow.


.. code-block:: default


    main_workflow.config['execution'] = {'remove_unnecessary_outputs': 'false'}

    # Run workflow locally on 1 CPU
    main_workflow.run(plugin='MultiProc', plugin_args={'n_procs': 1})







The output is the preprocessed data stored in the workflow directory
defined by `base_dir`.

Itâ€™s a good rule to inspect the report file saved in the same dir to look at
the excluded ICA components. It is also possible to include and exclude more
components by using either a jupyter notebook or the preprocessing pipeline
with different flag parameters.


.. code-block:: default

    import mne  # noqa
    from ephypype.gather.gather_results import get_results  # noqa

    ica_files, raw_files = get_results(main_workflow.base_dir,
                                       main_workflow.name, pipeline='ica')

    for ica_file, raw_file in zip(ica_files, raw_files):
        raw = mne.io.read_raw_fif(raw_file)
        ica = mne.preprocessing.read_ica(ica_file)
        ica.plot_properties(raw, picks=ica.exclude, figsize=[4.5, 4.5])



.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /auto_examples/images/sphx_glr_plot_preprocessing_002.png
            :class: sphx-glr-multi-img

    *

      .. image:: /auto_examples/images/sphx_glr_plot_preprocessing_003.png
            :class: sphx-glr-multi-img

    *

      .. image:: /auto_examples/images/sphx_glr_plot_preprocessing_004.png
            :class: sphx-glr-multi-img

    *

      .. image:: /auto_examples/images/sphx_glr_plot_preprocessing_005.png
            :class: sphx-glr-multi-img

    *

      .. image:: /auto_examples/images/sphx_glr_plot_preprocessing_006.png
            :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Opening raw data file /home/circleci/project/examples/sample_BIDS_omega/preprocessing_workflow/preproc_meeg_pipeline/_session_id_ses-0001_subject_id_sub-0003/ica/sub-0003_task-rest_run-01_meg_0_60_raw_filt_dsamp_ica.fif...
    /home/circleci/project/examples/plot_preprocessing.py:164: RuntimeWarning: This filename (/home/circleci/project/examples/sample_BIDS_omega/preprocessing_workflow/preproc_meeg_pipeline/_session_id_ses-0001_subject_id_sub-0003/ica/sub-0003_task-rest_run-01_meg_0_60_raw_filt_dsamp_ica.fif) does not conform to MNE naming conventions. All raw files should end with raw.fif, raw_sss.fif, raw_tsss.fif, raw.fif.gz, raw_sss.fif.gz, raw_tsss.fif.gz or _meg.fif
      raw = mne.io.read_raw_fif(raw_file)
        Read 5 compensation matrices
        Range : 0 ... 47999 =      0.000 ...    59.999 secs
    Ready.
    Current compensation grade : 3
    /home/circleci/project/examples/plot_preprocessing.py:165: RuntimeWarning: This filename (/home/circleci/project/examples/sample_BIDS_omega/preprocessing_workflow/preproc_meeg_pipeline/_session_id_ses-0001_subject_id_sub-0003/ica/sub-0003_task-rest_run-01_meg_0_60_raw_filt_dsamp_ica_solution.fif) does not conform to MNE naming conventions. All ICA files should end with -ica.fif, -ica.fif.gz, _ica.fif or _ica.fif.gz
      ica = mne.preprocessing.read_ica(ica_file)
    Reading /home/circleci/project/examples/sample_BIDS_omega/preprocessing_workflow/preproc_meeg_pipeline/_session_id_ses-0001_subject_id_sub-0003/ica/sub-0003_task-rest_run-01_meg_0_60_raw_filt_dsamp_ica_solution.fif ...
    Now restoring ICA solution ...
    Ready.
        Using multitaper spectrum estimation with 7 DPSS windows
    29 matching events found
    No baseline correction applied
    Not setting metadata
    0 projection items activated
    0 bad epochs dropped
    29 matching events found
    No baseline correction applied
    Not setting metadata
    0 projection items activated
    0 bad epochs dropped
    29 matching events found
    No baseline correction applied
    Not setting metadata
    0 projection items activated
    0 bad epochs dropped
    29 matching events found
    No baseline correction applied
    Not setting metadata
    0 projection items activated
    0 bad epochs dropped
    29 matching events found
    No baseline correction applied
    Not setting metadata
    0 projection items activated
    0 bad epochs dropped




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 2 minutes  31.994 seconds)


.. _sphx_glr_download_auto_examples_plot_preprocessing.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_preprocessing.py <plot_preprocessing.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_preprocessing.ipynb <plot_preprocessing.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
